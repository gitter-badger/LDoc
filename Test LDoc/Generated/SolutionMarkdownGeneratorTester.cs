// WARNING: this file was autogenerated by LUnit. Remove this line or move this file to prevent this file's contents from being overwritten.
using Xunit.Abstractions;
using LCore.LUnit;
using Xunit;
using System;
using LCore.LDoc.Markdown;
namespace LDoc_Tests.LCore.LDoc.Markdown
{
    ///<summary>
    /// Covering class: LCore.LDoc.Markdown.SolutionMarkdownGenerator
    ///
    ///LUnit has Autogenerated 38 method stubs:
    ///</summary>
    public partial class SolutionMarkdownGeneratorTester : XUnitOutputTester, IDisposable
    {
        public SolutionMarkdownGeneratorTester([NotNull] ITestOutputHelper Output) : base(Output) { }

        public void Dispose() { }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LDoc)+ "." + nameof(global::LCore.LDoc.Markdown)+ "." + nameof(SolutionMarkdownGenerator)+ "." + nameof(SolutionMarkdownGenerator.MicrosoftSystemReferencePath) + "(Type) => String")]
        public void MicrosoftSystemReferencePath()
        {
            // TODO: Implement method test LCore.LDoc.Markdown.SolutionMarkdownGenerator.MicrosoftSystemReferencePath
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LDoc)+ "." + nameof(global::LCore.LDoc.Markdown)+ "." + nameof(SolutionMarkdownGenerator)+ "." + nameof(SolutionMarkdownGenerator.FindMarkdown) + "(MemberInfo) => MarkdownDocument_Member")]
        public void FindMarkdown()
        {
            // TODO: Implement method test LCore.LDoc.Markdown.SolutionMarkdownGenerator.FindMarkdown
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LDoc)+ "." + nameof(global::LCore.LDoc.Markdown)+ "." + nameof(SolutionMarkdownGenerator)+ "." + nameof(SolutionMarkdownGenerator.Home_Intro) + "(GitHubMarkdown)")]
        public void Home_Intro()
        {
            // TODO: Implement method test LCore.LDoc.Markdown.SolutionMarkdownGenerator.Home_Intro
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LDoc)+ "." + nameof(global::LCore.LDoc.Markdown)+ "." + nameof(SolutionMarkdownGenerator)+ "." + nameof(SolutionMarkdownGenerator.HowToInstall) + "(GitHubMarkdown)")]
        public void HowToInstall()
        {
            // TODO: Implement method test LCore.LDoc.Markdown.SolutionMarkdownGenerator.HowToInstall
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LDoc)+ "." + nameof(global::LCore.LDoc.Markdown)+ "." + nameof(SolutionMarkdownGenerator)+ "." + nameof(SolutionMarkdownGenerator.GenerateRootMarkdown) + "() => GitHubMarkdown")]
        public void GenerateRootMarkdown()
        {
            // TODO: Implement method test LCore.LDoc.Markdown.SolutionMarkdownGenerator.GenerateRootMarkdown
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LDoc)+ "." + nameof(global::LCore.LDoc.Markdown)+ "." + nameof(SolutionMarkdownGenerator)+ "." + nameof(SolutionMarkdownGenerator.GenerateTableOfContentsMarkdown) + "() => GitHubMarkdown")]
        public void GenerateTableOfContentsMarkdown()
        {
            // TODO: Implement method test LCore.LDoc.Markdown.SolutionMarkdownGenerator.GenerateTableOfContentsMarkdown
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LDoc)+ "." + nameof(global::LCore.LDoc.Markdown)+ "." + nameof(SolutionMarkdownGenerator)+ "." + nameof(SolutionMarkdownGenerator.GenerateCoverageSummaryMarkdown) + "() => GitHubMarkdown")]
        public void GenerateCoverageSummaryMarkdown()
        {
            // TODO: Implement method test LCore.LDoc.Markdown.SolutionMarkdownGenerator.GenerateCoverageSummaryMarkdown
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LDoc)+ "." + nameof(global::LCore.LDoc.Markdown)+ "." + nameof(SolutionMarkdownGenerator)+ "." + nameof(SolutionMarkdownGenerator.GenerateMarkdown) + "(Assembly) => MarkdownDocument_Assembly")]
        public void GenerateMarkdown()
        {
            // TODO: Implement method test LCore.LDoc.Markdown.SolutionMarkdownGenerator.GenerateMarkdown
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LDoc)+ "." + nameof(global::LCore.LDoc.Markdown)+ "." + nameof(SolutionMarkdownGenerator)+ "." + nameof(SolutionMarkdownGenerator.GenerateMarkdown) + "(Type) => MarkdownDocument_Type")]
        public void GenerateMarkdown()
        {
            // TODO: Implement method test LCore.LDoc.Markdown.SolutionMarkdownGenerator.GenerateMarkdown
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LDoc)+ "." + nameof(global::LCore.LDoc.Markdown)+ "." + nameof(SolutionMarkdownGenerator)+ "." + nameof(SolutionMarkdownGenerator.GenerateMarkdown) + "(MethodInfo[]) => MarkdownDocument_MethodGroup")]
        public void GenerateMarkdown()
        {
            // TODO: Implement method test LCore.LDoc.Markdown.SolutionMarkdownGenerator.GenerateMarkdown
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LDoc)+ "." + nameof(global::LCore.LDoc.Markdown)+ "." + nameof(SolutionMarkdownGenerator)+ "." + nameof(SolutionMarkdownGenerator.GenerateMarkdown) + "(MemberInfo) => MarkdownDocument_Member")]
        public void GenerateMarkdown()
        {
            // TODO: Implement method test LCore.LDoc.Markdown.SolutionMarkdownGenerator.GenerateMarkdown
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LDoc)+ "." + nameof(global::LCore.LDoc.Markdown)+ "." + nameof(SolutionMarkdownGenerator)+ "." + nameof(SolutionMarkdownGenerator.WriteHeader) + "(GitHubMarkdown)")]
        public void WriteHeader()
        {
            // TODO: Implement method test LCore.LDoc.Markdown.SolutionMarkdownGenerator.WriteHeader
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LDoc)+ "." + nameof(global::LCore.LDoc.Markdown)+ "." + nameof(SolutionMarkdownGenerator)+ "." + nameof(SolutionMarkdownGenerator.TableOfContentsLink) + "(GitHubMarkdown) => String")]
        public void TableOfContentsLink()
        {
            // TODO: Implement method test LCore.LDoc.Markdown.SolutionMarkdownGenerator.TableOfContentsLink
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LDoc)+ "." + nameof(global::LCore.LDoc.Markdown)+ "." + nameof(SolutionMarkdownGenerator)+ "." + nameof(SolutionMarkdownGenerator.HomeLink) + "(GitHubMarkdown) => String")]
        public void HomeLink()
        {
            // TODO: Implement method test LCore.LDoc.Markdown.SolutionMarkdownGenerator.HomeLink
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LDoc)+ "." + nameof(global::LCore.LDoc.Markdown)+ "." + nameof(SolutionMarkdownGenerator)+ "." + nameof(SolutionMarkdownGenerator.GetOtherDocuments) + "() => Dictionary<String, GitHubMarkdown>")]
        public void GetOtherDocuments()
        {
            // TODO: Implement method test LCore.LDoc.Markdown.SolutionMarkdownGenerator.GetOtherDocuments
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LDoc)+ "." + nameof(global::LCore.LDoc.Markdown)+ "." + nameof(SolutionMarkdownGenerator)+ "." + nameof(SolutionMarkdownGenerator.FormatComment) + "(String) => String")]
        public void FormatComment()
        {
            // TODO: Implement method test LCore.LDoc.Markdown.SolutionMarkdownGenerator.FormatComment
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LDoc)+ "." + nameof(global::LCore.LDoc.Markdown)+ "." + nameof(SolutionMarkdownGenerator)+ "." + nameof(SolutionMarkdownGenerator.LinkToType) + "(GitHubMarkdown, Type) => String")]
        public void LinkToType()
        {
            // TODO: Implement method test LCore.LDoc.Markdown.SolutionMarkdownGenerator.LinkToType
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LDoc)+ "." + nameof(global::LCore.LDoc.Markdown)+ "." + nameof(SolutionMarkdownGenerator)+ "." + nameof(SolutionMarkdownGenerator.GetTypeMemberMarkdown) + "(Type) => List<KeyValuePair<MemberInfo, MarkdownDocument_Member>>")]
        public void GetTypeMemberMarkdown()
        {
            // TODO: Implement method test LCore.LDoc.Markdown.SolutionMarkdownGenerator.GetTypeMemberMarkdown
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LDoc)+ "." + nameof(global::LCore.LDoc.Markdown)+ "." + nameof(SolutionMarkdownGenerator)+ "." + nameof(SolutionMarkdownGenerator.GetAssemblyTypeMarkdown) + "(Assembly) => List<KeyValuePair<Type, MarkdownDocument_Type>>")]
        public void GetAssemblyTypeMarkdown()
        {
            // TODO: Implement method test LCore.LDoc.Markdown.SolutionMarkdownGenerator.GetAssemblyTypeMarkdown
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LDoc)+ "." + nameof(global::LCore.LDoc.Markdown)+ "." + nameof(SolutionMarkdownGenerator)+ "." + nameof(SolutionMarkdownGenerator.GetBadges_Info) + "(GitHubMarkdown, AssemblyCoverage, ICodeComment) => List<String>")]
        public void GetBadges_Info()
        {
            // TODO: Implement method test LCore.LDoc.Markdown.SolutionMarkdownGenerator.GetBadges_Info
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LDoc)+ "." + nameof(global::LCore.LDoc.Markdown)+ "." + nameof(SolutionMarkdownGenerator)+ "." + nameof(SolutionMarkdownGenerator.GetBadges_Coverage) + "(GitHubMarkdown, AssemblyCoverage, ICodeComment) => List<String>")]
        public void GetBadges_Coverage()
        {
            // TODO: Implement method test LCore.LDoc.Markdown.SolutionMarkdownGenerator.GetBadges_Coverage
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LDoc)+ "." + nameof(global::LCore.LDoc.Markdown)+ "." + nameof(SolutionMarkdownGenerator)+ "." + nameof(SolutionMarkdownGenerator.GetBadges_Info) + "(MarkdownDocument_Type, TypeCoverage, ICodeComment) => List<String>")]
        public void GetBadges_Info()
        {
            // TODO: Implement method test LCore.LDoc.Markdown.SolutionMarkdownGenerator.GetBadges_Info
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LDoc)+ "." + nameof(global::LCore.LDoc.Markdown)+ "." + nameof(SolutionMarkdownGenerator)+ "." + nameof(SolutionMarkdownGenerator.GetBadges_Coverage) + "(MarkdownDocument_Type, TypeCoverage, ICodeComment) => List<String>")]
        public void GetBadges_Coverage()
        {
            // TODO: Implement method test LCore.LDoc.Markdown.SolutionMarkdownGenerator.GetBadges_Coverage
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LDoc)+ "." + nameof(global::LCore.LDoc.Markdown)+ "." + nameof(SolutionMarkdownGenerator)+ "." + nameof(SolutionMarkdownGenerator.BannerImage_Large) + "(GitHubMarkdown) => String")]
        public void BannerImage_Large()
        {
            // TODO: Implement method test LCore.LDoc.Markdown.SolutionMarkdownGenerator.BannerImage_Large
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LDoc)+ "." + nameof(global::LCore.LDoc.Markdown)+ "." + nameof(SolutionMarkdownGenerator)+ "." + nameof(SolutionMarkdownGenerator.BannerImage_Small) + "(GitHubMarkdown) => String")]
        public void BannerImage_Small()
        {
            // TODO: Implement method test LCore.LDoc.Markdown.SolutionMarkdownGenerator.BannerImage_Small
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LDoc)+ "." + nameof(global::LCore.LDoc.Markdown)+ "." + nameof(SolutionMarkdownGenerator)+ "." + nameof(SolutionMarkdownGenerator.LogoImage_Large) + "(GitHubMarkdown) => String")]
        public void LogoImage_Large()
        {
            // TODO: Implement method test LCore.LDoc.Markdown.SolutionMarkdownGenerator.LogoImage_Large
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LDoc)+ "." + nameof(global::LCore.LDoc.Markdown)+ "." + nameof(SolutionMarkdownGenerator)+ "." + nameof(SolutionMarkdownGenerator.LogoImage_Small) + "(GitHubMarkdown) => String")]
        public void LogoImage_Small()
        {
            // TODO: Implement method test LCore.LDoc.Markdown.SolutionMarkdownGenerator.LogoImage_Small
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LDoc)+ "." + nameof(global::LCore.LDoc.Markdown)+ "." + nameof(SolutionMarkdownGenerator)+ "." + nameof(SolutionMarkdownGenerator.WriteFooter) + "(GitHubMarkdown)")]
        public void WriteFooter()
        {
            // TODO: Implement method test LCore.LDoc.Markdown.SolutionMarkdownGenerator.WriteFooter
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LDoc)+ "." + nameof(global::LCore.LDoc.Markdown)+ "." + nameof(SolutionMarkdownGenerator)+ "." + nameof(SolutionMarkdownGenerator.WriteCustomFooter) + "(GitHubMarkdown)")]
        public void WriteCustomFooter()
        {
            // TODO: Implement method test LCore.LDoc.Markdown.SolutionMarkdownGenerator.WriteCustomFooter
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LDoc)+ "." + nameof(global::LCore.LDoc.Markdown)+ "." + nameof(SolutionMarkdownGenerator)+ "." + nameof(SolutionMarkdownGenerator.MarkdownPath_Assembly) + "(Assembly) => String")]
        public void MarkdownPath_Assembly()
        {
            // TODO: Implement method test LCore.LDoc.Markdown.SolutionMarkdownGenerator.MarkdownPath_Assembly
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LDoc)+ "." + nameof(global::LCore.LDoc.Markdown)+ "." + nameof(SolutionMarkdownGenerator)+ "." + nameof(SolutionMarkdownGenerator.MarkdownPath_Type) + "(Type) => String")]
        public void MarkdownPath_Type()
        {
            // TODO: Implement method test LCore.LDoc.Markdown.SolutionMarkdownGenerator.MarkdownPath_Type
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LDoc)+ "." + nameof(global::LCore.LDoc.Markdown)+ "." + nameof(SolutionMarkdownGenerator)+ "." + nameof(SolutionMarkdownGenerator.MarkdownPath_Member) + "(MemberInfo) => String")]
        public void MarkdownPath_Member()
        {
            // TODO: Implement method test LCore.LDoc.Markdown.SolutionMarkdownGenerator.MarkdownPath_Member
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LDoc)+ "." + nameof(global::LCore.LDoc.Markdown)+ "." + nameof(SolutionMarkdownGenerator)+ "." + nameof(SolutionMarkdownGenerator.MarkdownPath_MethodGroup) + "(MethodInfo[]) => String")]
        public void MarkdownPath_MethodGroup()
        {
            // TODO: Implement method test LCore.LDoc.Markdown.SolutionMarkdownGenerator.MarkdownPath_MethodGroup
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LDoc)+ "." + nameof(global::LCore.LDoc.Markdown)+ "." + nameof(SolutionMarkdownGenerator)+ "." + nameof(SolutionMarkdownGenerator.IncludeType) + "(Type) => Boolean")]
        public void IncludeType()
        {
            // TODO: Implement method test LCore.LDoc.Markdown.SolutionMarkdownGenerator.IncludeType
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LDoc)+ "." + nameof(global::LCore.LDoc.Markdown)+ "." + nameof(SolutionMarkdownGenerator)+ "." + nameof(SolutionMarkdownGenerator.IncludeMember) + "(MemberInfo) => Boolean")]
        public void IncludeMember()
        {
            // TODO: Implement method test LCore.LDoc.Markdown.SolutionMarkdownGenerator.IncludeMember
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LDoc)+ "." + nameof(global::LCore.LDoc.Markdown)+ "." + nameof(SolutionMarkdownGenerator)+ "." + nameof(SolutionMarkdownGenerator.GetColorByPercentage) + "(Int32) => BadgeColor")]
        public void GetColorByPercentage()
        {
            // TODO: Implement method test LCore.LDoc.Markdown.SolutionMarkdownGenerator.GetColorByPercentage
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LDoc)+ "." + nameof(global::LCore.LDoc.Markdown)+ "." + nameof(SolutionMarkdownGenerator)+ "." + nameof(SolutionMarkdownGenerator.Generate) + "(Boolean)")]
        public void Generate()
        {
            // TODO: Implement method test LCore.LDoc.Markdown.SolutionMarkdownGenerator.Generate
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LDoc)+ "." + nameof(global::LCore.LDoc.Markdown)+ "." + nameof(SolutionMarkdownGenerator)+ "." + nameof(SolutionMarkdownGenerator.GetAllMarkdown) + "() => List<GitHubMarkdown>")]
        public void GetAllMarkdown()
        {
            // TODO: Implement method test LCore.LDoc.Markdown.SolutionMarkdownGenerator.GetAllMarkdown
        }

    }
}
