// WARNING: this file was autogenerated by LUnit. Remove this line or move this file to prevent this file's contents from being overwritten.
using Xunit.Abstractions;
using LCore.LUnit;
using Xunit;
using System;
using LCore.LDoc.Markdown;
namespace LDoc_Tests.LCore.LDoc.Markdown
{
    ///<summary>
    /// Covering class: LCore.LDoc.Markdown.MarkdownGenerator
    ///
    ///LUnit has Autogenerated 30 method stubs:
    ///</summary>
    public partial class MarkdownGeneratorTester
    {
        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LDoc)+ "." + nameof(global::LCore.LDoc.Markdown)+ "." + nameof(MarkdownGenerator)+ "." + nameof(MarkdownGenerator.Home_Intro) + "(GitHubMarkdown)")]
        public void Home_Intro()
        {
            // TODO: Implement method test LCore.LDoc.Markdown.MarkdownGenerator.Home_Intro
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LDoc)+ "." + nameof(global::LCore.LDoc.Markdown)+ "." + nameof(MarkdownGenerator)+ "." + nameof(MarkdownGenerator.HowToInstall) + "(GitHubMarkdown)")]
        public void HowToInstall()
        {
            // TODO: Implement method test LCore.LDoc.Markdown.MarkdownGenerator.HowToInstall
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LDoc)+ "." + nameof(global::LCore.LDoc.Markdown)+ "." + nameof(MarkdownGenerator)+ "." + nameof(MarkdownGenerator.GenerateRootMarkdown) + "() => GitHubMarkdown")]
        public void GenerateRootMarkdown()
        {
            // TODO: Implement method test LCore.LDoc.Markdown.MarkdownGenerator.GenerateRootMarkdown
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LDoc)+ "." + nameof(global::LCore.LDoc.Markdown)+ "." + nameof(MarkdownGenerator)+ "." + nameof(MarkdownGenerator.GenerateTableOfContentsMarkdown) + "() => GitHubMarkdown")]
        public void GenerateTableOfContentsMarkdown()
        {
            // TODO: Implement method test LCore.LDoc.Markdown.MarkdownGenerator.GenerateTableOfContentsMarkdown
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LDoc)+ "." + nameof(global::LCore.LDoc.Markdown)+ "." + nameof(MarkdownGenerator)+ "." + nameof(MarkdownGenerator.GenerateCoverageSummaryMarkdown) + "() => GitHubMarkdown")]
        public void GenerateCoverageSummaryMarkdown()
        {
            // TODO: Implement method test LCore.LDoc.Markdown.MarkdownGenerator.GenerateCoverageSummaryMarkdown
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LDoc)+ "." + nameof(global::LCore.LDoc.Markdown)+ "." + nameof(MarkdownGenerator)+ "." + nameof(MarkdownGenerator.GenerateMarkdown) + "(Assembly) => GitHubMarkdown_Assembly")]
        public void GenerateMarkdown()
        {
            // TODO: Implement method test LCore.LDoc.Markdown.MarkdownGenerator.GenerateMarkdown
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LDoc)+ "." + nameof(global::LCore.LDoc.Markdown)+ "." + nameof(MarkdownGenerator)+ "." + nameof(MarkdownGenerator.GenerateMarkdown) + "(Type) => GitHubMarkdown_Type")]
        public void GenerateMarkdown()
        {
            // TODO: Implement method test LCore.LDoc.Markdown.MarkdownGenerator.GenerateMarkdown
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LDoc)+ "." + nameof(global::LCore.LDoc.Markdown)+ "." + nameof(MarkdownGenerator)+ "." + nameof(MarkdownGenerator.GenerateMarkdown) + "(MemberInfo[]) => GitHubMarkdown_MemberGroup")]
        public void GenerateMarkdown()
        {
            // TODO: Implement method test LCore.LDoc.Markdown.MarkdownGenerator.GenerateMarkdown
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LDoc)+ "." + nameof(global::LCore.LDoc.Markdown)+ "." + nameof(MarkdownGenerator)+ "." + nameof(MarkdownGenerator.WriteHeader) + "(GitHubMarkdown)")]
        public void WriteHeader()
        {
            // TODO: Implement method test LCore.LDoc.Markdown.MarkdownGenerator.WriteHeader
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LDoc)+ "." + nameof(global::LCore.LDoc.Markdown)+ "." + nameof(MarkdownGenerator)+ "." + nameof(MarkdownGenerator.WriteCustomFooter) + "(GitHubMarkdown)")]
        public void WriteCustomFooter()
        {
            // TODO: Implement method test LCore.LDoc.Markdown.MarkdownGenerator.WriteCustomFooter
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LDoc)+ "." + nameof(global::LCore.LDoc.Markdown)+ "." + nameof(MarkdownGenerator)+ "." + nameof(MarkdownGenerator.TableOfContentsLink) + "(GitHubMarkdown) => String")]
        public void TableOfContentsLink()
        {
            // TODO: Implement method test LCore.LDoc.Markdown.MarkdownGenerator.TableOfContentsLink
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LDoc)+ "." + nameof(global::LCore.LDoc.Markdown)+ "." + nameof(MarkdownGenerator)+ "." + nameof(MarkdownGenerator.HomeLink) + "(GitHubMarkdown) => String")]
        public void HomeLink()
        {
            // TODO: Implement method test LCore.LDoc.Markdown.MarkdownGenerator.HomeLink
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LDoc)+ "." + nameof(global::LCore.LDoc.Markdown)+ "." + nameof(MarkdownGenerator)+ "." + nameof(MarkdownGenerator.GetOtherDocuments) + "() => Dictionary<String, GitHubMarkdown>")]
        public void GetOtherDocuments()
        {
            // TODO: Implement method test LCore.LDoc.Markdown.MarkdownGenerator.GetOtherDocuments
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LDoc)+ "." + nameof(global::LCore.LDoc.Markdown)+ "." + nameof(MarkdownGenerator)+ "." + nameof(MarkdownGenerator.GetTypeLink) + "(GitHubMarkdown, Type) => String")]
        public void GetTypeLink()
        {
            // TODO: Implement method test LCore.LDoc.Markdown.MarkdownGenerator.GetTypeLink
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LDoc)+ "." + nameof(global::LCore.LDoc.Markdown)+ "." + nameof(MarkdownGenerator)+ "." + nameof(MarkdownGenerator.GetTypeMemberMarkdown) + "(Type) => List<KeyValuePair<MemberInfo[], GitHubMarkdown_MemberGroup>>")]
        public void GetTypeMemberMarkdown()
        {
            // TODO: Implement method test LCore.LDoc.Markdown.MarkdownGenerator.GetTypeMemberMarkdown
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LDoc)+ "." + nameof(global::LCore.LDoc.Markdown)+ "." + nameof(MarkdownGenerator)+ "." + nameof(MarkdownGenerator.GetAssemblyTypeMarkdown) + "(Assembly) => List<KeyValuePair<Type, GitHubMarkdown_Type>>")]
        public void GetAssemblyTypeMarkdown()
        {
            // TODO: Implement method test LCore.LDoc.Markdown.MarkdownGenerator.GetAssemblyTypeMarkdown
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LDoc)+ "." + nameof(global::LCore.LDoc.Markdown)+ "." + nameof(MarkdownGenerator)+ "." + nameof(MarkdownGenerator.GetBadges_Info) + "(GitHubMarkdown, AssemblyCoverage, ICodeComment) => List<String>")]
        public void GetBadges_Info()
        {
            // TODO: Implement method test LCore.LDoc.Markdown.MarkdownGenerator.GetBadges_Info
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LDoc)+ "." + nameof(global::LCore.LDoc.Markdown)+ "." + nameof(MarkdownGenerator)+ "." + nameof(MarkdownGenerator.GetBadges_Coverage) + "(GitHubMarkdown, AssemblyCoverage, ICodeComment) => List<String>")]
        public void GetBadges_Coverage()
        {
            // TODO: Implement method test LCore.LDoc.Markdown.MarkdownGenerator.GetBadges_Coverage
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LDoc)+ "." + nameof(global::LCore.LDoc.Markdown)+ "." + nameof(MarkdownGenerator)+ "." + nameof(MarkdownGenerator.GetBadges_Info) + "(GitHubMarkdown, TypeCoverage, ICodeComment) => List<String>")]
        public void GetBadges_Info()
        {
            // TODO: Implement method test LCore.LDoc.Markdown.MarkdownGenerator.GetBadges_Info
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LDoc)+ "." + nameof(global::LCore.LDoc.Markdown)+ "." + nameof(MarkdownGenerator)+ "." + nameof(MarkdownGenerator.GetBadges_Coverage) + "(GitHubMarkdown, TypeCoverage, ICodeComment) => List<String>")]
        public void GetBadges_Coverage()
        {
            // TODO: Implement method test LCore.LDoc.Markdown.MarkdownGenerator.GetBadges_Coverage
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LDoc)+ "." + nameof(global::LCore.LDoc.Markdown)+ "." + nameof(MarkdownGenerator)+ "." + nameof(MarkdownGenerator.GetBadges_Info) + "(GitHubMarkdown, MethodCoverage, ICodeComment) => List<String>")]
        public void GetBadges_Info()
        {
            // TODO: Implement method test LCore.LDoc.Markdown.MarkdownGenerator.GetBadges_Info
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LDoc)+ "." + nameof(global::LCore.LDoc.Markdown)+ "." + nameof(MarkdownGenerator)+ "." + nameof(MarkdownGenerator.GetBadges_Coverage) + "(GitHubMarkdown, MethodCoverage, ICodeComment) => List<String>")]
        public void GetBadges_Coverage()
        {
            // TODO: Implement method test LCore.LDoc.Markdown.MarkdownGenerator.GetBadges_Coverage
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LDoc)+ "." + nameof(global::LCore.LDoc.Markdown)+ "." + nameof(MarkdownGenerator)+ "." + nameof(MarkdownGenerator.BannerImage_Large) + "(GitHubMarkdown) => String")]
        public void BannerImage_Large()
        {
            // TODO: Implement method test LCore.LDoc.Markdown.MarkdownGenerator.BannerImage_Large
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LDoc)+ "." + nameof(global::LCore.LDoc.Markdown)+ "." + nameof(MarkdownGenerator)+ "." + nameof(MarkdownGenerator.BannerImage_Small) + "(GitHubMarkdown) => String")]
        public void BannerImage_Small()
        {
            // TODO: Implement method test LCore.LDoc.Markdown.MarkdownGenerator.BannerImage_Small
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LDoc)+ "." + nameof(global::LCore.LDoc.Markdown)+ "." + nameof(MarkdownGenerator)+ "." + nameof(MarkdownGenerator.LogoImage_Large) + "(GitHubMarkdown) => String")]
        public void LogoImage_Large()
        {
            // TODO: Implement method test LCore.LDoc.Markdown.MarkdownGenerator.LogoImage_Large
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LDoc)+ "." + nameof(global::LCore.LDoc.Markdown)+ "." + nameof(MarkdownGenerator)+ "." + nameof(MarkdownGenerator.LogoImage_Small) + "(GitHubMarkdown) => String")]
        public void LogoImage_Small()
        {
            // TODO: Implement method test LCore.LDoc.Markdown.MarkdownGenerator.LogoImage_Small
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LDoc)+ "." + nameof(global::LCore.LDoc.Markdown)+ "." + nameof(MarkdownGenerator)+ "." + nameof(MarkdownGenerator.WriteFooter) + "(GitHubMarkdown)")]
        public void WriteFooter()
        {
            // TODO: Implement method test LCore.LDoc.Markdown.MarkdownGenerator.WriteFooter
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LDoc)+ "." + nameof(global::LCore.LDoc.Markdown)+ "." + nameof(MarkdownGenerator)+ "." + nameof(MarkdownGenerator.IncludeType) + "(Type) => Boolean")]
        public void IncludeType()
        {
            // TODO: Implement method test LCore.LDoc.Markdown.MarkdownGenerator.IncludeType
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LDoc)+ "." + nameof(global::LCore.LDoc.Markdown)+ "." + nameof(MarkdownGenerator)+ "." + nameof(MarkdownGenerator.IncludeMember) + "(MemberInfo) => Boolean")]
        public void IncludeMember()
        {
            // TODO: Implement method test LCore.LDoc.Markdown.MarkdownGenerator.IncludeMember
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LDoc)+ "." + nameof(global::LCore.LDoc.Markdown)+ "." + nameof(MarkdownGenerator)+ "." + nameof(MarkdownGenerator.GetColorByPercentage) + "(Int32) => BadgeColor")]
        public void GetColorByPercentage()
        {
            // TODO: Implement method test LCore.LDoc.Markdown.MarkdownGenerator.GetColorByPercentage
        }

    }
}
