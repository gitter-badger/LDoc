// WARNING: this file was autogenerated by LUnit. Remove this line or move this file to prevent this file's contents from being overwritten.
using Xunit.Abstractions;
using LCore.LUnit;
using Xunit;
using System;
using LCore.LDoc.Markdown;
namespace LDoc_Tests.LCore.LDoc.Markdown
{
    ///<summary>
    /// Covering class: LCore.LDoc.Markdown.MarkdownDocument_Member
    ///
    ///LUnit has Autogenerated 13 method stubs:
    ///</summary>
    public partial class MarkdownDocument_MemberTester : XUnitOutputTester, IDisposable
    {
        public MarkdownDocument_MemberTester([NotNull] ITestOutputHelper Output) : base(Output) { }

        public void Dispose() { }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LDoc)+ "." + nameof(global::LCore.LDoc.Markdown)+ "." + nameof(MarkdownDocument_Member)+ "." + nameof(MarkdownDocument_Member.GetSignature) + "(GeneratedDocument, Boolean) => String")]
        public void GetSignature()
        {
            // TODO: Implement method test LCore.LDoc.Markdown.MarkdownDocument_Member.GetSignature
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LDoc)+ "." + nameof(global::LCore.LDoc.Markdown)+ "." + nameof(MarkdownDocument_Member)+ "." + nameof(MarkdownDocument_Member.GetBadge_Documented) + "(GeneratedDocument, Boolean) => String")]
        public void GetBadge_Documented()
        {
            // TODO: Implement method test LCore.LDoc.Markdown.MarkdownDocument_Member.GetBadge_Documented
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LDoc)+ "." + nameof(global::LCore.LDoc.Markdown)+ "." + nameof(MarkdownDocument_Member)+ "." + nameof(MarkdownDocument_Member.GetBadge_MemberType) + "(GeneratedDocument, Boolean) => String")]
        public void GetBadge_MemberType()
        {
            // TODO: Implement method test LCore.LDoc.Markdown.MarkdownDocument_Member.GetBadge_MemberType
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LDoc)+ "." + nameof(global::LCore.LDoc.Markdown)+ "." + nameof(MarkdownDocument_Member)+ "." + nameof(MarkdownDocument_Member.GetBadge_SourceCode) + "(GeneratedDocument, Boolean) => String")]
        public void GetBadge_SourceCode()
        {
            // TODO: Implement method test LCore.LDoc.Markdown.MarkdownDocument_Member.GetBadge_SourceCode
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LDoc)+ "." + nameof(global::LCore.LDoc.Markdown)+ "." + nameof(MarkdownDocument_Member)+ "." + nameof(MarkdownDocument_Member.GetBadge_NotImplemented) + "(GeneratedDocument, Boolean) => String")]
        public void GetBadge_NotImplemented()
        {
            // TODO: Implement method test LCore.LDoc.Markdown.MarkdownDocument_Member.GetBadge_NotImplemented
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LDoc)+ "." + nameof(global::LCore.LDoc.Markdown)+ "." + nameof(MarkdownDocument_Member)+ "." + nameof(MarkdownDocument_Member.GetBadge_CodeLines) + "(GeneratedDocument, Boolean) => String")]
        public void GetBadge_CodeLines()
        {
            // TODO: Implement method test LCore.LDoc.Markdown.MarkdownDocument_Member.GetBadge_CodeLines
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LDoc)+ "." + nameof(global::LCore.LDoc.Markdown)+ "." + nameof(MarkdownDocument_Member)+ "." + nameof(MarkdownDocument_Member.GetBadge_Todos) + "(GeneratedDocument, Boolean) => String")]
        public void GetBadge_Todos()
        {
            // TODO: Implement method test LCore.LDoc.Markdown.MarkdownDocument_Member.GetBadge_Todos
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LDoc)+ "." + nameof(global::LCore.LDoc.Markdown)+ "." + nameof(MarkdownDocument_Member)+ "." + nameof(MarkdownDocument_Member.GetBadge_Bugs) + "(GeneratedDocument, Boolean) => String")]
        public void GetBadge_Bugs()
        {
            // TODO: Implement method test LCore.LDoc.Markdown.MarkdownDocument_Member.GetBadge_Bugs
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LDoc)+ "." + nameof(global::LCore.LDoc.Markdown)+ "." + nameof(MarkdownDocument_Member)+ "." + nameof(MarkdownDocument_Member.GetBadge_CustomTags) + "(GeneratedDocument, Boolean) => String[]")]
        public void GetBadge_CustomTags()
        {
            // TODO: Implement method test LCore.LDoc.Markdown.MarkdownDocument_Member.GetBadge_CustomTags
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LDoc)+ "." + nameof(global::LCore.LDoc.Markdown)+ "." + nameof(MarkdownDocument_Member)+ "." + nameof(MarkdownDocument_Member.GetBadge_Covered) + "(GeneratedDocument, Boolean) => String")]
        public void GetBadge_Covered()
        {
            // TODO: Implement method test LCore.LDoc.Markdown.MarkdownDocument_Member.GetBadge_Covered
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LDoc)+ "." + nameof(global::LCore.LDoc.Markdown)+ "." + nameof(MarkdownDocument_Member)+ "." + nameof(MarkdownDocument_Member.GetBadge_AttributeCoverage) + "(GeneratedDocument, Boolean) => String")]
        public void GetBadge_AttributeCoverage()
        {
            // TODO: Implement method test LCore.LDoc.Markdown.MarkdownDocument_Member.GetBadge_AttributeCoverage
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LDoc)+ "." + nameof(global::LCore.LDoc.Markdown)+ "." + nameof(MarkdownDocument_Member)+ "." + nameof(MarkdownDocument_Member.GetBadge_UnitTests) + "(GeneratedDocument, Boolean) => String")]
        public void GetBadge_UnitTests()
        {
            // TODO: Implement method test LCore.LDoc.Markdown.MarkdownDocument_Member.GetBadge_UnitTests
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LDoc)+ "." + nameof(global::LCore.LDoc.Markdown)+ "." + nameof(MarkdownDocument_Member)+ "." + nameof(MarkdownDocument_Member.GetBadge_Assertions) + "(GeneratedDocument, Boolean) => String")]
        public void GetBadge_Assertions()
        {
            // TODO: Implement method test LCore.LDoc.Markdown.MarkdownDocument_Member.GetBadge_Assertions
        }

    }
}
