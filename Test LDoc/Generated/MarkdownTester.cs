// WARNING: this file was autogenerated by LUnit. Remove this line or move this file to prevent this file's contents from being overwritten.
using Xunit.Abstractions;
using LCore.LUnit;
using Xunit;
using System;
using LCore.LDoc.Markdown;
namespace LDoc_Tests.LCore.LDoc.Markdown
{
    ///<summary>
    /// Covering class: LCore.LDoc.Markdown.Markdown
    ///
    ///LUnit has Autogenerated 28 method stubs:
    ///</summary>
    public partial class MarkdownTester : XUnitOutputTester, IDisposable
    {
        public MarkdownTester([NotNull] ITestOutputHelper Output) : base(Output) { }

        public void Dispose() { }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LDoc)+ "." + nameof(global::LCore.LDoc.Markdown)+ "." + nameof(global::LCore.LDoc.Markdown.Markdown)+ "." + nameof(global::LCore.LDoc.Markdown.Markdown.Clear) + "()")]
        public void Clear()
        {
            // TODO: Implement method test LCore.LDoc.Markdown.Markdown.Clear
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LDoc)+ "." + nameof(global::LCore.LDoc.Markdown)+ "." + nameof(global::LCore.LDoc.Markdown.Markdown)+ "." + nameof(global::LCore.LDoc.Markdown.Markdown.GetMarkdownLines) + "() => List<String>")]
        public void GetMarkdownLines()
        {
            // TODO: Implement method test LCore.LDoc.Markdown.Markdown.GetMarkdownLines
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LDoc)+ "." + nameof(global::LCore.LDoc.Markdown)+ "." + nameof(global::LCore.LDoc.Markdown.Markdown)+ "." + nameof(global::LCore.LDoc.Markdown.Markdown.BlankLine) + "()")]
        public void BlankLine()
        {
            // TODO: Implement method test LCore.LDoc.Markdown.Markdown.BlankLine
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LDoc)+ "." + nameof(global::LCore.LDoc.Markdown)+ "." + nameof(global::LCore.LDoc.Markdown.Markdown)+ "." + nameof(global::LCore.LDoc.Markdown.Markdown.HorizontalRule) + "()")]
        public void HorizontalRule()
        {
            // TODO: Implement method test LCore.LDoc.Markdown.Markdown.HorizontalRule
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LDoc)+ "." + nameof(global::LCore.LDoc.Markdown)+ "." + nameof(global::LCore.LDoc.Markdown.Markdown)+ "." + nameof(global::LCore.LDoc.Markdown.Markdown.Header) + "(String, Int32, Boolean) => String")]
        public void Header()
        {
            // TODO: Implement method test LCore.LDoc.Markdown.Markdown.Header
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LDoc)+ "." + nameof(global::LCore.LDoc.Markdown)+ "." + nameof(global::LCore.LDoc.Markdown.Markdown)+ "." + nameof(global::LCore.LDoc.Markdown.Markdown.HeaderUnderline) + "(String, Int32)")]
        public void HeaderUnderline()
        {
            // TODO: Implement method test LCore.LDoc.Markdown.Markdown.HeaderUnderline
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LDoc)+ "." + nameof(global::LCore.LDoc.Markdown)+ "." + nameof(global::LCore.LDoc.Markdown.Markdown)+ "." + nameof(global::LCore.LDoc.Markdown.Markdown.OrderedList) + "(String[])")]
        public void OrderedList()
        {
            // TODO: Implement method test LCore.LDoc.Markdown.Markdown.OrderedList
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LDoc)+ "." + nameof(global::LCore.LDoc.Markdown)+ "." + nameof(global::LCore.LDoc.Markdown.Markdown)+ "." + nameof(global::LCore.LDoc.Markdown.Markdown.OrderedList) + "(Tuple<UInt32, String>[])")]
        public void OrderedList()
        {
            // TODO: Implement method test LCore.LDoc.Markdown.Markdown.OrderedList
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LDoc)+ "." + nameof(global::LCore.LDoc.Markdown)+ "." + nameof(global::LCore.LDoc.Markdown.Markdown)+ "." + nameof(global::LCore.LDoc.Markdown.Markdown.OrderedList) + "(Set<UInt32, String>[])")]
        public void OrderedList()
        {
            // TODO: Implement method test LCore.LDoc.Markdown.Markdown.OrderedList
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LDoc)+ "." + nameof(global::LCore.LDoc.Markdown)+ "." + nameof(global::LCore.LDoc.Markdown.Markdown)+ "." + nameof(global::LCore.LDoc.Markdown.Markdown.UnorderedList) + "(String[])")]
        public void UnorderedList()
        {
            // TODO: Implement method test LCore.LDoc.Markdown.Markdown.UnorderedList
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LDoc)+ "." + nameof(global::LCore.LDoc.Markdown)+ "." + nameof(global::LCore.LDoc.Markdown.Markdown)+ "." + nameof(global::LCore.LDoc.Markdown.Markdown.UnorderedList) + "(Tuple<UInt32, String>[])")]
        public void UnorderedList()
        {
            // TODO: Implement method test LCore.LDoc.Markdown.Markdown.UnorderedList
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LDoc)+ "." + nameof(global::LCore.LDoc.Markdown)+ "." + nameof(global::LCore.LDoc.Markdown.Markdown)+ "." + nameof(global::LCore.LDoc.Markdown.Markdown.UnorderedList) + "(Set<UInt32, String>[])")]
        public void UnorderedList()
        {
            // TODO: Implement method test LCore.LDoc.Markdown.Markdown.UnorderedList
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LDoc)+ "." + nameof(global::LCore.LDoc.Markdown)+ "." + nameof(global::LCore.LDoc.Markdown.Markdown)+ "." + nameof(global::LCore.LDoc.Markdown.Markdown.Code) + "(String[], String)")]
        public void Code()
        {
            // TODO: Implement method test LCore.LDoc.Markdown.Markdown.Code
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LDoc)+ "." + nameof(global::LCore.LDoc.Markdown)+ "." + nameof(global::LCore.LDoc.Markdown.Markdown)+ "." + nameof(global::LCore.LDoc.Markdown.Markdown.BlockQuote) + "(String[])")]
        public void BlockQuote()
        {
            // TODO: Implement method test LCore.LDoc.Markdown.Markdown.BlockQuote
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LDoc)+ "." + nameof(global::LCore.LDoc.Markdown)+ "." + nameof(global::LCore.LDoc.Markdown.Markdown)+ "." + nameof(global::LCore.LDoc.Markdown.Markdown.Lines) + "(String[])")]
        public void Lines()
        {
            // TODO: Implement method test LCore.LDoc.Markdown.Markdown.Lines
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LDoc)+ "." + nameof(global::LCore.LDoc.Markdown)+ "." + nameof(global::LCore.LDoc.Markdown.Markdown)+ "." + nameof(global::LCore.LDoc.Markdown.Markdown.Line) + "(String)")]
        public void Line()
        {
            // TODO: Implement method test LCore.LDoc.Markdown.Markdown.Line
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LDoc)+ "." + nameof(global::LCore.LDoc.Markdown)+ "." + nameof(global::LCore.LDoc.Markdown.Markdown)+ "." + nameof(global::LCore.LDoc.Markdown.Markdown.Strikethrough) + "(String) => String")]
        public void Strikethrough()
        {
            // TODO: Implement method test LCore.LDoc.Markdown.Markdown.Strikethrough
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LDoc)+ "." + nameof(global::LCore.LDoc.Markdown)+ "." + nameof(global::LCore.LDoc.Markdown.Markdown)+ "." + nameof(global::LCore.LDoc.Markdown.Markdown.Highlight) + "(String) => String")]
        public void Highlight()
        {
            // TODO: Implement method test LCore.LDoc.Markdown.Markdown.Highlight
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LDoc)+ "." + nameof(global::LCore.LDoc.Markdown)+ "." + nameof(global::LCore.LDoc.Markdown.Markdown)+ "." + nameof(global::LCore.LDoc.Markdown.Markdown.InlineCode) + "(String) => String")]
        public void InlineCode()
        {
            // TODO: Implement method test LCore.LDoc.Markdown.Markdown.InlineCode
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LDoc)+ "." + nameof(global::LCore.LDoc.Markdown)+ "." + nameof(global::LCore.LDoc.Markdown.Markdown)+ "." + nameof(global::LCore.LDoc.Markdown.Markdown.Table) + "(String[,], Boolean, Align[], Boolean)")]
        public void Table()
        {
            // TODO: Implement method test LCore.LDoc.Markdown.Markdown.Table
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LDoc)+ "." + nameof(global::LCore.LDoc.Markdown)+ "." + nameof(global::LCore.LDoc.Markdown.Markdown)+ "." + nameof(global::LCore.LDoc.Markdown.Markdown.Table) + "(IEnumerable<IEnumerable<String>>, Boolean, Align[], Boolean, String)")]
        public void Table()
        {
            // TODO: Implement method test LCore.LDoc.Markdown.Markdown.Table
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LDoc)+ "." + nameof(global::LCore.LDoc.Markdown)+ "." + nameof(global::LCore.LDoc.Markdown.Markdown)+ "." + nameof(global::LCore.LDoc.Markdown.Markdown.Link) + "(String, String, String, Boolean, Boolean, Boolean) => String")]
        public void Link()
        {
            // TODO: Implement method test LCore.LDoc.Markdown.Markdown.Link
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LDoc)+ "." + nameof(global::LCore.LDoc.Markdown)+ "." + nameof(global::LCore.LDoc.Markdown.Markdown)+ "." + nameof(global::LCore.LDoc.Markdown.Markdown.Image) + "(String, String, Nullable<Align>, Boolean) => String")]
        public void Image()
        {
            // TODO: Implement method test LCore.LDoc.Markdown.Markdown.Image
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LDoc)+ "." + nameof(global::LCore.LDoc.Markdown)+ "." + nameof(global::LCore.LDoc.Markdown.Markdown)+ "." + nameof(global::LCore.LDoc.Markdown.Markdown.Italic) + "(String, Boolean) => String")]
        public void Italic()
        {
            // TODO: Implement method test LCore.LDoc.Markdown.Markdown.Italic
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LDoc)+ "." + nameof(global::LCore.LDoc.Markdown)+ "." + nameof(global::LCore.LDoc.Markdown.Markdown)+ "." + nameof(global::LCore.LDoc.Markdown.Markdown.Bold) + "(String, Boolean) => String")]
        public void Bold()
        {
            // TODO: Implement method test LCore.LDoc.Markdown.Markdown.Bold
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LDoc)+ "." + nameof(global::LCore.LDoc.Markdown)+ "." + nameof(global::LCore.LDoc.Markdown.Markdown)+ "." + nameof(global::LCore.LDoc.Markdown.Markdown.Badge) + "(String, String, String, Boolean) => String")]
        public void Badge()
        {
            // TODO: Implement method test LCore.LDoc.Markdown.Markdown.Badge
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LDoc)+ "." + nameof(global::LCore.LDoc.Markdown)+ "." + nameof(global::LCore.LDoc.Markdown.Markdown)+ "." + nameof(global::LCore.LDoc.Markdown.Markdown.Badge) + "(String, String, BadgeColor, Boolean) => String")]
        public void Badge()
        {
            // TODO: Implement method test LCore.LDoc.Markdown.Markdown.Badge
        }

        [Fact]
        [Trait(Traits.TargetMember,nameof(LCore)+ "." + nameof(global::LCore.LDoc)+ "." + nameof(global::LCore.LDoc.Markdown)+ "." + nameof(global::LCore.LDoc.Markdown.Markdown)+ "." + nameof(global::LCore.LDoc.Markdown.Markdown.Gravatar) + "(String, Int32, Boolean) => String")]
        public void Gravatar()
        {
            // TODO: Implement method test LCore.LDoc.Markdown.Markdown.Gravatar
        }

    }
}
